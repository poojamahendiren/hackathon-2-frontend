{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harpa\\\\shopit-guvi\\\\frontend\\\\src\\\\components\\\\CheckoutForm.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Form, Button, Col } from \"react-bootstrap\";\nimport { useStripe, useElements, CardElement } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nconst CARD_ELEMENT_OPTIONS = {\n  style: {\n    base: {\n      color: \"#32325d\",\n      fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n      fontSmoothing: \"antialiased\",\n      fontSize: \"16px\",\n      \"::placeholder\": {\n        color: \"#aab7c4\"\n      }\n    },\n    invalid: {\n      color: \"#fa755a\",\n      iconColor: \"#fa755a\"\n    }\n  }\n};\n\nconst CheckoutForm = ({\n  totalPrice,\n  paymentHandler\n}) => {\n  const [clientSecret, setClientSecret] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState(null);\n  const [disabled, setDisabled] = useState(true);\n  const [succeeded, setSucceeded] = useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    const createPaymentIntent = async () => {\n      const {\n        data\n      } = await axios.post(\"/api/payments/config/stripe-payment-intent\", {\n        amount: totalPrice.toFixed(0),\n        currency: \"inr\"\n      });\n      setClientSecret(data.client_secret);\n    };\n\n    createPaymentIntent();\n  }, []);\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n    setProcessing(true);\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: \"Mohd Maaz\"\n        }\n      }\n    });\n\n    if (result.error) {\n      setError(`Payment failed ${result.error.message}`);\n      console.log(result.error.message);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n\n      if (result.paymentIntent.status === \"succeeded\") {\n        console.log(\"[PaymentIntent]\", result.paymentIntent);\n        paymentHandler(result.paymentIntent); // TODO:\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, processing && /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 22\n    }\n  }), error && /*#__PURE__*/React.createElement(Message, {\n    variant: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, error), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"Card Details: \"), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardElement, {\n    options: CARD_ELEMENT_OPTIONS,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"primary\",\n    className: \"btn-block\",\n    disabled: !stripe || disabled || succeeded || processing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, \"Proceed To Checkout\")));\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["C:/Users/harpa/shopit-guvi/frontend/src/components/CheckoutForm.js"],"names":["React","useEffect","useState","Form","Button","Col","useStripe","useElements","CardElement","axios","Message","Loader","CARD_ELEMENT_OPTIONS","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","CheckoutForm","totalPrice","paymentHandler","clientSecret","setClientSecret","processing","setProcessing","error","setError","disabled","setDisabled","succeeded","setSucceeded","stripe","elements","createPaymentIntent","data","post","amount","toFixed","currency","client_secret","handleChange","event","empty","message","handleSubmit","preventDefault","result","confirmCardPayment","payment_method","card","getElement","billing_details","name","console","log","paymentIntent","status"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Form, Button, Col } from \"react-bootstrap\";\r\nimport { useStripe, useElements, CardElement } from \"@stripe/react-stripe-js\";\r\nimport axios from \"axios\";\r\nimport Message from \"../components/Message\";\r\nimport Loader from \"../components/Loader\";\r\n\r\nconst CARD_ELEMENT_OPTIONS = {\r\n  style: {\r\n    base: {\r\n      color: \"#32325d\",\r\n      fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\r\n      fontSmoothing: \"antialiased\",\r\n      fontSize: \"16px\",\r\n      \"::placeholder\": {\r\n        color: \"#aab7c4\",\r\n      },\r\n    },\r\n    invalid: {\r\n      color: \"#fa755a\",\r\n      iconColor: \"#fa755a\",\r\n    },\r\n  },\r\n};\r\n\r\nconst CheckoutForm = ({ totalPrice, paymentHandler }) => {\r\n  const [clientSecret, setClientSecret] = useState(null);\r\n  const [processing, setProcessing] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [disabled, setDisabled] = useState(true);\r\n  const [succeeded, setSucceeded] = useState(false);\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  useEffect(() => {\r\n    const createPaymentIntent = async () => {\r\n      const { data } = await axios.post(\r\n        \"/api/payments/config/stripe-payment-intent\",\r\n        {\r\n          amount: totalPrice.toFixed(0),\r\n          currency: \"inr\",\r\n        }\r\n      );\r\n\r\n      setClientSecret(data.client_secret);\r\n    };\r\n\r\n    createPaymentIntent();\r\n  }, []);\r\n\r\n  const handleChange = async (event) => {\r\n    // Listen for changes in the CardElement\r\n    // and display any errors as the customer types their card details\r\n    setDisabled(event.empty);\r\n    setError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    // We don't want to let default form submission happen here,\r\n    // which would refresh the page.\r\n    event.preventDefault();\r\n    setProcessing(true);\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    const result = await stripe.confirmCardPayment(clientSecret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n        billing_details: {\r\n          name: \"Mohd Maaz\",\r\n        },\r\n      },\r\n    });\r\n\r\n    if (result.error) {\r\n      setError(`Payment failed ${result.error.message}`);\r\n      console.log(result.error.message);\r\n      setProcessing(false);\r\n    } else {\r\n      setError(null);\r\n      setProcessing(false);\r\n      setSucceeded(true);\r\n\r\n      if (result.paymentIntent.status === \"succeeded\") {\r\n        console.log(\"[PaymentIntent]\", result.paymentIntent);\r\n        paymentHandler(result.paymentIntent);\r\n\r\n        // TODO:\r\n        // There's a risk of the customer closing the window before callback\r\n        // execution. Set up a webhook or plugin to listen for the\r\n        // payment_intent.succeeded event that handles any business critical\r\n        // post-payment actions.\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {processing && <Loader />}\r\n      {error && <Message variant=\"danger\">{error}</Message>}\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group>\r\n          <Form.Label>Card Details: </Form.Label>\r\n          <Col>\r\n            <CardElement\r\n              options={CARD_ELEMENT_OPTIONS}\r\n              onChange={handleChange}\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"primary\"\r\n          className=\"btn-block\"\r\n          disabled={!stripe || disabled || succeeded || processing}\r\n        >\r\n          Proceed To Checkout\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;\r\n"]},"metadata":{},"sourceType":"module"}