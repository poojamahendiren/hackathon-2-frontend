{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer, productDeleteReducer, productCreateReducer, productUpdateReducer, productReviewCreateReducer, productTopRatedReducer } from './reducers/product-reducers';\nimport { cartReducer } from './reducers/cart-reducers';\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer, userListReducer, userDeleteReducer, userUpdateReducer, userAddToFavoriteReducer, userRemoveFavoriteReducer, userGetFavoritesReducer } from './reducers/user-reducers';\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, getMyOrdersReducer, orderListReducer, orderDeliverReducer } from './reducers/order-reducers';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  productDelete: productDeleteReducer,\n  productCreate: productCreateReducer,\n  productUpdate: productUpdateReducer,\n  productReviewCreate: productReviewCreateReducer,\n  productTopRated: productTopRatedReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  userUpdate: userUpdateReducer,\n  userAddFavorites: userAddToFavoriteReducer,\n  userRemoveFavorite: userRemoveFavoriteReducer,\n  userGetFavorites: userGetFavoritesReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderGetMyOrders: getMyOrdersReducer,\n  orderList: orderListReducer,\n  orderDeliver: orderDeliverReducer\n}); // get cart items from localStorage if exists\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : []; // get user info from localStorage if exists\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null; // get shipping address from localStorage if exists\n\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {};\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["C:/Users/harpa/shopit-guvi/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","productDeleteReducer","productCreateReducer","productUpdateReducer","productReviewCreateReducer","productTopRatedReducer","cartReducer","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","userListReducer","userDeleteReducer","userUpdateReducer","userAddToFavoriteReducer","userRemoveFavoriteReducer","userGetFavoritesReducer","orderCreateReducer","orderDetailsReducer","orderPayReducer","getMyOrdersReducer","orderListReducer","orderDeliverReducer","reducer","productList","productDetails","productDelete","productCreate","productUpdate","productReviewCreate","productTopRated","cart","userLogin","userRegister","userDetails","userUpdateProfile","userList","userDelete","userUpdate","userAddFavorites","userRemoveFavorite","userGetFavorites","orderCreate","orderDetails","orderPay","orderGetMyOrders","orderList","orderDeliver","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SACCC,kBADD,EAECC,qBAFD,EAGCC,oBAHD,EAICC,oBAJD,EAKCC,oBALD,EAMCC,0BAND,EAOCC,sBAPD,QAQO,6BARP;AASA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SACCC,gBADD,EAECC,mBAFD,EAGCC,kBAHD,EAICC,wBAJD,EAKCC,eALD,EAMCC,iBAND,EAOCC,iBAPD,EAQCC,wBARD,EASCC,yBATD,EAUCC,uBAVD,QAWO,0BAXP;AAYA,SACCC,kBADD,EAECC,mBAFD,EAGCC,eAHD,EAICC,kBAJD,EAKCC,gBALD,EAMCC,mBAND,QAOO,2BAPP;AASA,MAAMC,OAAO,GAAG5B,eAAe,CAAC;AAC/B6B,EAAAA,WAAW,EAAEzB,kBADkB;AAE/B0B,EAAAA,cAAc,EAAEzB,qBAFe;AAG/B0B,EAAAA,aAAa,EAAEzB,oBAHgB;AAI/B0B,EAAAA,aAAa,EAAEzB,oBAJgB;AAK/B0B,EAAAA,aAAa,EAAEzB,oBALgB;AAM/B0B,EAAAA,mBAAmB,EAAEzB,0BANU;AAO/B0B,EAAAA,eAAe,EAAEzB,sBAPc;AAQ/B0B,EAAAA,IAAI,EAAEzB,WARyB;AAS/B0B,EAAAA,SAAS,EAAEzB,gBAToB;AAU/B0B,EAAAA,YAAY,EAAEzB,mBAViB;AAW/B0B,EAAAA,WAAW,EAAEzB,kBAXkB;AAY/B0B,EAAAA,iBAAiB,EAAEzB,wBAZY;AAa/B0B,EAAAA,QAAQ,EAAEzB,eAbqB;AAc/B0B,EAAAA,UAAU,EAAEzB,iBAdmB;AAe/B0B,EAAAA,UAAU,EAAEzB,iBAfmB;AAgB/B0B,EAAAA,gBAAgB,EAAEzB,wBAhBa;AAiB/B0B,EAAAA,kBAAkB,EAAEzB,yBAjBW;AAkB/B0B,EAAAA,gBAAgB,EAAEzB,uBAlBa;AAmB/B0B,EAAAA,WAAW,EAAEzB,kBAnBkB;AAoB/B0B,EAAAA,YAAY,EAAEzB,mBApBiB;AAqB/B0B,EAAAA,QAAQ,EAAEzB,eArBqB;AAsB/B0B,EAAAA,gBAAgB,EAAEzB,kBAtBa;AAuB/B0B,EAAAA,SAAS,EAAEzB,gBAvBoB;AAwB/B0B,EAAAA,YAAY,EAAEzB;AAxBiB,CAAD,CAA/B,C,CA2BA;;AACA,MAAM0B,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAC1BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAD0B,GAE1B,EAFH,C,CAIA;;AACA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IACzBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADyB,GAEzB,IAFH,C,CAIA;;AACA,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAb,CAAqB,iBAArB,IAChCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CADgC,GAEhC,EAFH;AAIA,MAAMK,YAAY,GAAG;AACpBxB,EAAAA,IAAI,EAAE;AACLyB,IAAAA,SAAS,EAAER,oBADN;AAELS,IAAAA,eAAe,EAAEH;AAFZ,GADc;AAKpBtB,EAAAA,SAAS,EAAE;AACV0B,IAAAA,QAAQ,EAAEL;AADA;AALS,CAArB;AAUA,MAAMM,UAAU,GAAG,CAAC9D,KAAD,CAAnB;AAEA,MAAM+D,KAAK,GAAGlE,WAAW,CACxB6B,OADwB,EAExBgC,YAFwB,EAGxBzD,mBAAmB,CAACF,eAAe,CAAC,GAAG+D,UAAJ,CAAhB,CAHK,CAAzB;AAMA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {\r\n\tproductListReducer,\r\n\tproductDetailsReducer,\r\n\tproductDeleteReducer,\r\n\tproductCreateReducer,\r\n\tproductUpdateReducer,\r\n\tproductReviewCreateReducer,\r\n\tproductTopRatedReducer,\r\n} from './reducers/product-reducers';\r\nimport { cartReducer } from './reducers/cart-reducers';\r\nimport {\r\n\tuserLoginReducer,\r\n\tuserRegisterReducer,\r\n\tuserDetailsReducer,\r\n\tuserUpdateProfileReducer,\r\n\tuserListReducer,\r\n\tuserDeleteReducer,\r\n\tuserUpdateReducer,\r\n\tuserAddToFavoriteReducer,\r\n\tuserRemoveFavoriteReducer,\r\n\tuserGetFavoritesReducer,\r\n} from './reducers/user-reducers';\r\nimport {\r\n\torderCreateReducer,\r\n\torderDetailsReducer,\r\n\torderPayReducer,\r\n\tgetMyOrdersReducer,\r\n\torderListReducer,\r\n\torderDeliverReducer,\r\n} from './reducers/order-reducers';\r\n\r\nconst reducer = combineReducers({\r\n\tproductList: productListReducer,\r\n\tproductDetails: productDetailsReducer,\r\n\tproductDelete: productDeleteReducer,\r\n\tproductCreate: productCreateReducer,\r\n\tproductUpdate: productUpdateReducer,\r\n\tproductReviewCreate: productReviewCreateReducer,\r\n\tproductTopRated: productTopRatedReducer,\r\n\tcart: cartReducer,\r\n\tuserLogin: userLoginReducer,\r\n\tuserRegister: userRegisterReducer,\r\n\tuserDetails: userDetailsReducer,\r\n\tuserUpdateProfile: userUpdateProfileReducer,\r\n\tuserList: userListReducer,\r\n\tuserDelete: userDeleteReducer,\r\n\tuserUpdate: userUpdateReducer,\r\n\tuserAddFavorites: userAddToFavoriteReducer,\r\n\tuserRemoveFavorite: userRemoveFavoriteReducer,\r\n\tuserGetFavorites: userGetFavoritesReducer,\r\n\torderCreate: orderCreateReducer,\r\n\torderDetails: orderDetailsReducer,\r\n\torderPay: orderPayReducer,\r\n\torderGetMyOrders: getMyOrdersReducer,\r\n\torderList: orderListReducer,\r\n\torderDeliver: orderDeliverReducer,\r\n});\r\n\r\n// get cart items from localStorage if exists\r\nconst cartItemsFromStorage = localStorage.getItem('cartItems')\r\n\t? JSON.parse(localStorage.getItem('cartItems'))\r\n\t: [];\r\n\r\n// get user info from localStorage if exists\r\nconst userInfoFromStorage = localStorage.getItem('userInfo')\r\n\t? JSON.parse(localStorage.getItem('userInfo'))\r\n\t: null;\r\n\r\n// get shipping address from localStorage if exists\r\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress')\r\n\t? JSON.parse(localStorage.getItem('shippingAddress'))\r\n\t: {};\r\n\r\nconst initialState = {\r\n\tcart: {\r\n\t\tcartItems: cartItemsFromStorage,\r\n\t\tshippingAddress: shippingAddressFromStorage,\r\n\t},\r\n\tuserLogin: {\r\n\t\tuserInfo: userInfoFromStorage,\r\n\t},\r\n};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n\treducer,\r\n\tinitialState,\r\n\tcomposeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}